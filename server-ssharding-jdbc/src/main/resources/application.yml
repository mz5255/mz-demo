# Tomcat
server:
  port: 8888
mybatis-plus:
  #加载映射文件
  mapper-locations: classpath:mapper/*.xml
  #开启驼峰命名
  configuration:
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# Spring
spring:
  shardingsphere:
    datasource:
      names: db1,db2   #配置多数据源
---
spring:
  shardingsphere:
    datasource:
      db1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name=com: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.161.131:3307/mz-master?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
        username: root
        password: 123456
      db2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name=com: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.161.131:3308/mz-master?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
        username: root
        password: 123456
      # ====================== 读写分离配置 ======================
    rules:
      master-slave-rules:
        db1:
          master-data-source-name: db1
          name: db1
          slave-data-source-names: db2

    sharding:
      tables:
        sys_user:  #主表名字
          actual-data-nodes: db$->{1..2}.sys_user_$->{1..2}  #分表与分库规则
          key-generator:
            column: user_id  #主键名
            type: SNOWFLAKE   #主键生成策略
#            定义分库规则   采用水平分库
#          database-strategy:
#            inline:
#              sharding-column: user_id
#              algorithm-expression: db$->{user_id % 2 + 1}

#          定义分表规则采用水平分表
          table-strategy:
            inline:
              sharding-column: user_id
              # 指定表分片策略 约定user_id值是偶数添加到user_1表，如果user_id是奇数添加到user_2表
              algorithm-expression: sys_user_$->{user_id % 2 + 1}


    props:
      sql:
        show: true

  main:
    allow-bean-definition-overriding: true










